version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: mzekezeke-postgres
    environment:
      POSTGRES_DB: mzekezeke
      POSTGRES_USER: mzekezeke_user
      POSTGRES_PASSWORD: mzekezeke_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - mzekezeke-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mzekezeke_user -d mzekezeke"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: mzekezeke-redis
    ports:
      - "6379:6379"
    networks:
      - mzekezeke-network
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # mzekezeke Environmental Cryptography Server
  mzekezeke-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mzekezeke-server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - SERVER_WORKERS=4
      - DATABASE_URL=postgresql://mzekezeke_user:mzekezeke_password@postgres:5432/mzekezeke
      - REDIS_URL=redis://redis:6379
      - ENABLE_GPS_SENSOR=true
      - ENABLE_CELLULAR_SENSOR=true
      - ENABLE_WIFI_SENSOR=true
      - ENABLE_HARDWARE_SENSOR=true
      - ENCRYPTION_KEY_SIZE=256
      - REALITY_DIMENSIONS=12
      - CHALLENGE_TIMEOUT=30
      - WORKER_THREADS=4
      - BUFFER_SIZE=8192
      - CACHE_SIZE=1024
    ports:
      - "8080:8080"
    networks:
      - mzekezeke-network
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web API Server
  mzekezeke-web-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mzekezeke-web-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8081
      - DATABASE_URL=postgresql://mzekezeke_user:mzekezeke_password@postgres:5432/mzekezeke
      - REDIS_URL=redis://redis:6379
      - CORE_SERVER_URL=http://mzekezeke-server:8080
    ports:
      - "8081:8081"
    networks:
      - mzekezeke-network
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    command: ["./mzekezeke-web-api"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy and static file server
  nginx:
    image: nginx:alpine
    container_name: mzekezeke-nginx
    depends_on:
      - mzekezeke-server
      - mzekezeke-web-api
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mzekezeke-network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./assets:/usr/share/nginx/html/assets:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mzekezeke-prometheus
    ports:
      - "9090:9090"
    networks:
      - mzekezeke-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mzekezeke-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    networks:
      - mzekezeke-network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mzekezeke-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16 